name: CI

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      TERM: dumb
      ORG_GRADLE_PROJECT_TIVI_TMDB_API_KEY: ${{ secrets.ORG_GRADLE_PROJECT_TIVI_TMDB_API_KEY }}
      ORG_GRADLE_PROJECT_TIVI_TVDB_API_KEY: ${{ secrets.ORG_GRADLE_PROJECT_TIVI_TVDB_API_KEY }}
      ORG_GRADLE_PROJECT_TIVI_TRAKT_CLIENT_ID: ${{ secrets.ORG_GRADLE_PROJECT_TIVI_TRAKT_CLIENT_ID }}
      ORG_GRADLE_PROJECT_TIVI_TRAKT_CLIENT_SECRET: ${{ secrets.ORG_GRADLE_PROJECT_TIVI_TRAKT_CLIENT_SECRET }}
      ORG_GRADLE_PROJECT_TIVI_RELEASE_KEYSTORE_PWD: ${{ secrets.ORG_GRADLE_PROJECT_TIVI_RELEASE_KEYSTORE_PWD }}
      ORG_GRADLE_PROJECT_TIVI_RELEASE_KEY_PWD: ${{ secrets.ORG_GRADLE_PROJECT_TIVI_RELEASE_KEY_PWD }}
      ORG_GRADLE_PROJECT_TIVI_PLAY_PUBLISHER_ACCOUNT: ${{ secrets.ORG_GRADLE_PROJECT_TIVI_PLAY_PUBLISHER_ACCOUNT }}

    steps:
      - name: Generate build number
        shell: bash
        run: echo "ORG_GRADLE_PROJECT_TIVI_VERSIONCODE=$(( $GITHUB_RUN_NUMBER + 10000 ))" >> $GITHUB_ENV

      - uses: actions/checkout@v3

      - name: set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 17

      - uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      - name: Decrypt secrets
        run: ./release/decrypt-secrets.sh
        env:
          ENCRYPT_KEY: ${{ secrets.ENCRYPT_KEY }}

      - name: Build (skipping benchmark type)
        run: ./gradlew build bundle -x :app:assembleStandardBenchmark -x :app:bundleStandardBenchmark

      - name: Create release for tags
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          generate_release_notes: true
          files: |
            app/build/outputs/apk/standard/release/app-standard-release.apk

      - name: Publish QA build to internal track
        if: github.ref == 'refs/heads/main'
        uses: r0adkll/upload-google-play@v1.1.1
        with:
          serviceAccountJson: release/play-account.json
          packageName: app.tivi
          track: internal
          releaseFiles: app/build/outputs/bundle/qaRelease/app-qa-release.aab
          mappingFile: app/build/outputs/mapping/qaRelease/mapping.txt

      - name: Publish build to alpha track
        if: github.ref == 'refs/heads/main'
        uses: r0adkll/upload-google-play@v1.1.1
        with:
          serviceAccountJson: release/play-account.json
          packageName: app.tivi
          track: alpha
          releaseFiles: app/build/outputs/bundle/standardRelease/app-standard-release.aab
          mappingFile: app/build/outputs/mapping/standardRelease/mapping.txt

      - name: Build changelog for beta release
        id: build_changelog
        if: startsWith(github.ref, 'refs/tags/v')
        uses: mikepenz/release-changelog-builder-action@v3
        with:
          configurationJson: |
            {
              "template": "Changes:\n#{{UNCATEGORIZED}}",
              "pr_template": "#{{TITLE}} ##{{NUMBER}}",
              "trim_values": true,
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create changelog folder for beta release
        if: steps.build_changelog.outcome == 'success'
        run: mkdir playwhatsnew

      - name: Write changelog for beta release
        if: steps.build_changelog.outcome == 'success'
        continue-on-error: true # Need to fix echo multiline string
        run: echo '${{ steps.build_changelog.outputs.changelog }}' > playwhatsnew/whatsnew-en-US

      - name: Publish tagged release to beta track
        if: startsWith(github.ref, 'refs/tags/v')
        uses: r0adkll/upload-google-play@v1.1.1
        with:
          serviceAccountJson: release/play-account.json
          packageName: app.tivi
          track: beta
          whatsNewDirectory: playwhatsnew
          releaseFiles: app/build/outputs/bundle/standardRelease/app-standard-release.aab
          mappingFile: app/build/outputs/mapping/standardRelease/mapping.txt

      - name: Clean secrets
        if: always()
        run: ./release/clean-secrets.sh

      - name: Upload build outputs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: build-outputs
          path: app/build/outputs

      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: reports
          path: |
            **/build/reports/*

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: junit-results
          path: |
            **/build/test-results/*
