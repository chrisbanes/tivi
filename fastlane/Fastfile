platform :android do

  lane :publish_qa do
    upload_to_play_store(
      package_name: "app.tivi",
      track: "internal",
      aab: "android-app/app/build/outputs/bundle/qaRelease/app-qa-release.aab",
      mapping: "android-app/app/build/outputs/mapping/qaRelease/mapping.txt",
      json_key: "release/play-account.json"
    )
  end

  lane :publish_prod do
    upload_to_play_store(
      package_name: "app.tivi",
      track: "alpha",
      aab: "android-app/app/build/outputs/bundle/standardRelease/app-standard-release.aab",
      mapping: "android-app/app/build/outputs/mapping/standardRelease/mapping.txt",
      json_key: "release/play-account.json"
    )
  end

end

platform :ios do

  before_all do |lane|
    cleanup_ci_keychain if is_ci
  end

  after_all do |lane|
    cleanup_ci_keychain if is_ci
  end

  error do |lane, exception|
    cleanup_ci_keychain if is_ci
  end

  lane :certs do |options|
    app_store_connect_api_key(
      key_id: ENV['API_KEY_ID'],
      issuer_id: ENV['ISSUER_KEY_ID'],
      key_content: ENV['API_KEY_CONTENTS'],
      is_key_content_base64: true
    )

    match(
      app_identifier: ["app.tivi.client", "app.tivi.qa"],
      type: options[:type] || "development"
    )
  end

  lane :lint do
    swiftlint(
      mode: :lint,
      path: "ios-app/Tivi",
      strict: true,
      raise_if_swiftlint_error: true
    )
  end

  lane :lint_fix do
    swiftlint(
      mode: :fix,
      path: "ios-app/Tivi",
    )
  end

  private_lane :build_tivi do |options|
    setup_ci if is_ci

    skip_certs = env_nil_or_blank('MATCH_PASSWORD')

    certs(type: 'appstore') unless skip_certs

    increment_build_number(
      xcodeproj: "ios-app/Tivi/Tivi.xcodeproj",
      build_number: ENV['TIVI_BUILD_NUMBER']
    ) unless env_nil_or_blank('TIVI_BUILD_NUMBER')

    build_app(
      project: "ios-app/Tivi/Tivi.xcodeproj",
      scheme: options[:scheme],
      buildlog_path: "build/fastlane-buildlog",
      skip_package_ipa: skip_certs,
      skip_codesigning: skip_certs
    )
  end

  lane :build_qa do
    build_tivi(scheme: "Tivi QA")
  end

  lane :build_prod do
    build_tivi(scheme: "Tivi Prod")
  end

  lane :build_all do
    build_qa
    build_prod
  end

  lane :publish_qa do
    app_store_connect_api_key(
      key_id: ENV['API_KEY_ID'],
      issuer_id: ENV['ISSUER_KEY_ID'],
      key_content: ENV['API_KEY_CONTENTS'],
      is_key_content_base64: true
    )

    upload_to_testflight(app_identifier: "app.tivi.qa")
  end

  lane :publish_prod do
    app_store_connect_api_key(
      key_id: ENV['API_KEY_ID'],
      issuer_id: ENV['ISSUER_KEY_ID'],
      key_content: ENV['API_KEY_CONTENTS'],
      is_key_content_base64: true
    )

    upload_to_testflight(app_identifier: "app.tivi.client")
  end

end

def cleanup_ci_keychain(name = "fastlane_tmp_keychain")
  if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
    puts "CI keychain exists. Deleting it and restoring the default keychain"
    delete_keychain(name: name)
    sh("security default-keychain -s ~/Library/Keychains/login.keychain-db")
  end
end

def env_nil_or_blank(name)
  value = ENV[name]
  return value.nil? || value.empty?
end
