/*
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'com.android.application'
    id 'dagger.hilt.android.plugin'

    id 'kotlin-android'
    id 'kotlin-kapt'
}

kapt {
    correctErrorTypes = true
    useBuildCache = true
}

def appVersionCode = propOrDef("tivi.versioncode", 17) as Integer
println("APK version code: " + appVersionCode)

def useReleaseKeystore = rootProject.file("release/app-release.jks").exists()

ext {
    ci = System.getenv("CI") == "true"
}

android {
    compileSdkVersion buildConfig.compileSdk

    defaultConfig {
        applicationId "app.tivi"
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk
        versionCode appVersionCode
        versionName "0.6.0"

        // For now we're sticking to just shipping EN
        resConfigs "en"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "TRAKT_CLIENT_ID", "\"" + propOrDef("TIVI_TRAKT_CLIENT_ID", "") + "\""
        buildConfigField "String", "TRAKT_CLIENT_SECRET", "\"" + propOrDef("TIVI_TRAKT_CLIENT_SECRET", "") + "\""
        buildConfigField "String", "TMDB_API_KEY", "\"" + propOrDef("TIVI_TMDB_API_KEY", "") + "\""
    }

    signingConfigs {
        debug {
            storeFile rootProject.file("release/app-debug.jks")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }

        release {
            if (useReleaseKeystore) {
                storeFile rootProject.file("release/app-release.jks")
                storePassword propOrDef('TIVI_RELEASE_KEYSTORE_PWD', "")
                keyAlias "tivi"
                keyPassword propOrDef('TIVI_RELEASE_KEY_PWD', "")
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        // Disable lintVital. Not needed since lint is run on CI
        checkReleaseBuilds false
        // Ignore any tests
        ignoreTestSources true
        // Make the build fail on any lint errors
        abortOnError true
        // Allow lint to check dependencies
        checkDependencies true
    }

    buildFeatures {
        viewBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.compose.get()
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    packagingOptions {
        // Exclude AndroidX version files
        exclude 'META-INF/*.version'
        // Exclude consumer proguard files
        exclude 'META-INF/proguard/*'
        // Exclude the Firebase/Fabric/other random properties files
        exclude '/*.properties'
        exclude 'fabric/*.properties'
        exclude 'META-INF/*.properties'
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            versionNameSuffix "-dev"
            applicationIdSuffix ".debug"
        }

        release {
            if (useReleaseKeystore) {
                signingConfig signingConfigs.release
            } else {
                // Otherwise just use the debug keystore (this is mainly for PR CI builds)
                signingConfig signingConfigs.debug
            }
            shrinkResources true
            minifyEnabled true
            proguardFiles 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation project(':base')
    implementation project(':base-android')
    implementation project(':common-ui-view')
    implementation project(':common-imageloading')
    implementation project(':common-ui-compose')
    implementation project(':data')
    implementation project(':data-android')
    implementation project(':trakt')
    implementation project(':trakt-auth')
    implementation project(':tmdb')
    implementation project(':domain')
    implementation project(':tasks')

    implementation project(':ui-account')
    implementation project(':ui-discover')
    implementation project(':ui-showdetails')
    implementation project(':ui-episodedetails')
    implementation project(':ui-followed')
    implementation project(':ui-watched')
    implementation project(':ui-popular')
    implementation project(':ui-trending')
    implementation project(':ui-recommended')
    implementation project(':ui-search')
    implementation project(':ui-showseasons')
    implementation project(':ui-settings')

    implementation libs.androidx.lifecycle.viewmodel.ktx

    implementation libs.androidx.activity.compose

    implementation libs.androidx.navigation.compose

    implementation libs.androidx.emoji

    implementation libs.compose.foundation.foundation
    implementation libs.compose.foundation.layout
    implementation libs.compose.material.material
    implementation libs.compose.animation.animation
    implementation libs.compose.ui.tooling
    implementation libs.compose.ui.viewbinding

    implementation libs.accompanist.insets

    implementation libs.threeTenAbp

    implementation libs.timber

    implementation libs.kotlin.stdlib

    implementation libs.kotlin.coroutines.core
    implementation libs.kotlin.coroutines.android

    implementation libs.hilt.library
    implementation libs.androidx.hilt.compose
    kapt libs.hilt.compiler

    implementation libs.androidx.hilt.work
    kapt libs.androidx.hilt.compiler

    implementation libs.google.crashlytics
    implementation libs.google.analytics

    debugImplementation libs.leakCanary

    testImplementation libs.junit
    testImplementation libs.robolectric
    testImplementation libs.androidx.test.core
    testImplementation libs.androidx.test.rules
}

android.applicationVariants.all { variant ->
    task "open${variant.name.capitalize()}" {
        dependsOn "install${variant.name.capitalize()}"

        doLast {
            exec {
                commandLine "adb shell monkey -p ${variant.applicationId} -c android.intent.category.LAUNCHER 1".split(" ")
            }
        }
    }
}

if (file("google-services.json").exists()) {
    apply plugin: 'com.google.gms.google-services'
    apply plugin: 'com.google.firebase.crashlytics'
}
