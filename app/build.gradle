/*
 * Copyright 2017 Google, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

ext {
    ci = System.getenv("CI") == "true"
}

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
kapt {
    correctErrorTypes = true
}
apply plugin: 'kotlin-android-extensions'
androidExtensions {
    experimental = true
}

apply plugin: 'com.getkeepsafe.dexcount'
dexcount {
    // Only run the method counter on CI
    runOnEachPackage = ci
}

apply plugin: 'com.github.triplet.play'
play {
    track = 'internal'
    uploadImages = true
}

if (file("google-services.json").exists()) {
    apply plugin: 'com.google.gms.google-services'
    apply plugin: 'io.fabric'
}

def appVersionCode = propOrDef("tivi.versioncode", 17) as Integer
println("APK version code: " + appVersionCode)

android {
    compileSdkVersion buildConfig.compileSdk

    playAccountConfigs {
        defaultAccountConfig {
            serviceAccountEmail = propOrDef('TIVI_PLAY_PUBLISHER_ACCOUNT', "")
            jsonFile = rootProject.file('signing/play-account.json')
        }
    }

    defaultConfig {
        applicationId "app.tivi"
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk
        versionCode appVersionCode
        versionName "0.2.11"

        // For now we're sticking to just shipping EN
        resConfigs "en"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        playAccountConfig = playAccountConfigs.defaultAccountConfig

        buildConfigField "String", "TRAKT_CLIENT_ID", "\"" + propOrDef("TIVI_TRAKT_CLIENT_ID", "") + "\""
        buildConfigField "String", "TRAKT_CLIENT_SECRET", "\"" + propOrDef("TIVI_TRAKT_CLIENT_SECRET", "") + "\""
        buildConfigField "String", "TMDB_API_KEY", "\"" + propOrDef("TIVI_TMDB_API_KEY", "") + "\""

        manifestPlaceholders += ['appAuthRedirectScheme': 'app.tivi']
    }

    signingConfigs {
        debug {
            storeFile rootProject.file("signing/app-debug.jks")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }

        release {
            storeFile rootProject.file("signing/app-release.jks")
            storePassword propOrDef('TIVI_RELEASE_KEYSTORE_PWD', "")
            keyAlias "tivi"
            keyPassword propOrDef('TIVI_RELEASE_KEY_PWD', "")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        // Don't pre-dex on CI
        preDexLibraries !ci
    }

    lintOptions {
        // Disable lintVital. Not needed since lint is run on CI
        checkReleaseBuilds false

        disable 'GradleCompatible'
    }

    dataBinding {
        enabled = true
    }

    packagingOptions {
        // Exclude AndroidX version files
        exclude 'META-INF/*.version'
        // Exclude consumer proguard files
        exclude 'META-INF/proguard/*'
        // Exclude the Firebase/Fabric/other random properties files
        exclude '/*.properties'
        exclude 'fabric/*.properties'
        exclude 'META-INF/*.properties'
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            versionNameSuffix "-dev [${getGitHash()}]"
            applicationIdSuffix ".debug"
        }

        release {
            signingConfig signingConfigs.release
            shrinkResources true
            minifyEnabled true
            proguardFiles 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation project(":base")
    implementation project(":base-android")
    implementation project(":data")
    implementation project(":data-android")
    implementation project(":trakt")
    implementation project(":trakt-auth")
    implementation project(":tmdb")
    implementation project(':interactors')
    implementation project(":tasks")

    implementation "android.arch.lifecycle:extensions:${versions.androidx.lifecycle}"
    implementation "android.arch.lifecycle:reactivestreams:${versions.androidx.lifecycle}"
    kapt "android.arch.lifecycle:compiler:${versions.androidx.lifecycle}"

    implementation "android.arch.paging:runtime:${versions.androidx.paging}"
    implementation "android.arch.paging:rxjava2:${versions.androidx.paging}"

    implementation "com.android.support:appcompat-v7:${versions.androidx.appcompat}"
    implementation "com.android.support:design:${versions.material_design}"
    implementation "com.android.support:customtabs:${versions.androidx.browser}"
    implementation "com.android.support:palette-v7:${versions.androidx.palette}"
    implementation "com.android.support:recyclerview-v7:${versions.androidx.recyclerview}"
    implementation "com.android.support:support-emoji:${versions.androidx.emoji}"

    implementation("android.arch.work:work-runtime-ktx:${versions.androidx.work}") {
        // We have to exclude this since it wants 1.1.1-rc1 and we're using 1.1.1
        exclude group: 'android.arch.persistence.room', module: 'runtime'
    }

    implementation "com.android.support.constraint:constraint-layout:${versions.androidx.constraint_layout}"

    implementation "androidx.core:core-ktx:${versions.androidx.core_ktx}"

    implementation "com.jakewharton.threetenabp:threetenabp:${versions.threetenabp}"

    implementation "io.reactivex.rxjava2:rxjava:${versions.rx}"
    implementation "io.reactivex.rxjava2:rxkotlin:${versions.rxkotlin}"
    implementation "io.reactivex.rxjava2:rxandroid:2.1.0"

    implementation 'com.cantrowitz:rxbroadcast:2.0.0'

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}"

    implementation "com.google.dagger:dagger-android:${versions.dagger}"
    implementation "com.google.dagger:dagger-android-support:${versions.dagger}"
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${versions.dagger}"

    compileOnly 'com.squareup.inject:assisted-inject-annotations-dagger2:0.2.1'
    kapt 'com.squareup.inject:assisted-inject-processor-dagger2:0.2.1'

    implementation "com.github.bumptech.glide:glide:${versions.glide}"
    kapt "com.github.bumptech.glide:compiler:${versions.glide}"

    implementation 'com.airbnb.android:mvrx:0.5.0'

    implementation "com.airbnb.android:epoxy:${versions.epoxy}"
    implementation "com.airbnb.android:epoxy-paging:${versions.epoxy}"
    implementation "com.airbnb.android:epoxy-databinding:${versions.epoxy}"
    kapt "com.airbnb.android:epoxy-processor:${versions.epoxy}"

    implementation 'com.github.rubensousa:gravitysnaphelper:1.5'

    testImplementation 'junit:junit:4.12'

    androidTestImplementation "com.android.support.test:runner:${versions.androidx.test_runner}"
    androidTestImplementation "com.android.support.test:rules:${versions.androidx.test_rules}"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:${versions.espresso}"
    androidTestImplementation "android.arch.persistence.room:runtime:${versions.androidx.room}"
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito:2.19.1'

    debugImplementation "nl.littlerobots.rxlint:rxlint:${versions.rxlint}"

    implementation "com.google.firebase:firebase-core:${versions.firebase}"
    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.5'

    implementation "org.jetbrains:annotations:16.0.1"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.coroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:${versions.coroutines}"
}

def getGitHash() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
