import java.text.SimpleDateFormat

/*
 * Copyright 2017 Google, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply plugin: 'com.getkeepsafe.dexcount'

apply plugin: 'com.github.triplet.play'

apply plugin: 'com.diffplug.gradle.spotless'
spotless {
    kotlin {
        target "**/*.kt"
        ktlint(versions.ktlint)
        licenseHeaderFile '../spotless/copyright.kt'
    }
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"

    playAccountConfigs {
        defaultAccountConfig {
            serviceAccountEmail = propOrDef('TIVI_PLAY_PUBLISHER_ACCOUNT', "")
            pk12File = rootProject.file('signing/play-account.p12')
        }
    }

    defaultConfig {
        applicationId "me.banes.chris.tivi"
        minSdkVersion 23
        targetSdkVersion 26
        versionCode 1
        versionName "0.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "TRAKT_CLIENT_ID", "\"" + propOrDef("TIVI_TRAKT_CLIENT_ID", "") + "\""
        buildConfigField "String", "TRAKT_CLIENT_SECRET", "\"" + propOrDef("TIVI_TRAKT_CLIENT_SECRET", "") + "\""
        buildConfigField "String", "TMDB_API_KEY", "\"" + propOrDef("TIVI_TMDB_API_KEY", "") + "\""

        manifestPlaceholders += [
                'appAuthRedirectScheme': 'me.banes.chris.tivi'
        ]

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        playAccountConfig = playAccountConfigs.defaultAccountConfig
    }

    signingConfigs {
        debug {
            storeFile rootProject.file("signing/app-debug.jks")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }

        release {
            storeFile rootProject.file("signing/app-release.jks")
            storePassword propOrDef('TIVI_RELEASE_KEYSTORE_PWD', "")
            keyAlias "tivi"
            keyPassword propOrDef('TIVI_RELEASE_KEY_PWD', "")
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        preDexLibraries "true" != System.getenv("CI")
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            versionNameSuffix "-dev-" + getBuildDate()
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

androidExtensions {
    experimental = true
}

play {
    track = 'alpha'
    uploadImages = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre8:${versions.kotlin}"

    implementation "android.arch.lifecycle:runtime:${versions.arch_comp}"
    implementation "android.arch.lifecycle:extensions:${versions.arch_comp}"
    implementation "android.arch.lifecycle:reactivestreams:${versions.arch_comp}"
    kapt "android.arch.lifecycle:compiler:${versions.arch_comp}"

    implementation "android.arch.persistence.room:runtime:${versions.arch_comp}"
    implementation "android.arch.persistence.room:rxjava2:${versions.arch_comp}"
    kapt "android.arch.persistence.room:compiler:${versions.arch_comp}"

    implementation "com.android.support:appcompat-v7:${versions.support_library}"
    implementation "com.android.support:design:${versions.support_library}"
    implementation "com.android.support:customtabs:${versions.support_library}"

    implementation "com.android.support.constraint:constraint-layout:${versions.constraint_layout}"

    implementation "com.uwetrottmann.trakt5:trakt-java:5.7.1"
    implementation "com.uwetrottmann.tmdb2:tmdb-java:1.8.1"

    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.1'

    implementation "io.reactivex.rxjava2:rxjava:2.1.3"
    implementation "io.reactivex.rxjava2:rxandroid:2.0.1"

    implementation "com.google.dagger:dagger:${versions.dagger}"
    implementation "com.google.dagger:dagger-android:${versions.dagger}"
    implementation "com.google.dagger:dagger-android-support:${versions.dagger}"
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${versions.dagger}"

    implementation 'com.jakewharton.timber:timber:4.5.1'

    implementation "com.github.bumptech.glide:glide:4.0.0"

    implementation 'com.xwray:groupie:2.0.0-alpha2'

    implementation "net.openid:appauth:0.6.1"

    testImplementation 'junit:junit:4.12'

    androidTestImplementation("com.android.support.test.espresso:espresso-core:${versions.espresso}", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    debugImplementation "com.squareup.leakcanary:leakcanary-android:${versions.leakcanary}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${versions.leakcanary}"
}

String propOrDef(String propertyName, String defaultValue) {
    def propertyValue = project.properties[propertyName]
    return propertyValue != null ? propertyValue : defaultValue
}

static def getBuildDate() {
    def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'") //you can change it
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}
