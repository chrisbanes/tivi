/*
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.kapt)
    alias(libs.plugins.hilt)
}

def appVersionCode = propOrDef("TIVI_VERSIONCODE", 17) as Integer
println("APK version code: " + appVersionCode)

def useReleaseKeystore = rootProject.file("release/app-release.jks").exists()

ext {
    ci = System.getenv("CI") == "true"
}

android {
    namespace 'app.tivi'

    defaultConfig {
        applicationId "app.tivi"
        versionCode appVersionCode
        versionName "0.6.4"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "TRAKT_CLIENT_ID", "\"" + propOrDef("TIVI_TRAKT_CLIENT_ID", "") + "\""
        buildConfigField "String", "TRAKT_CLIENT_SECRET", "\"" + propOrDef("TIVI_TRAKT_CLIENT_SECRET", "") + "\""
        buildConfigField "String", "TMDB_API_KEY", "\"" + propOrDef("TIVI_TMDB_API_KEY", "") + "\""
    }

    signingConfigs {
        debug {
            storeFile rootProject.file("release/app-debug.jks")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }

        release {
            if (useReleaseKeystore) {
                storeFile rootProject.file("release/app-release.jks")
                storePassword propOrDef('TIVI_RELEASE_KEYSTORE_PWD', "")
                keyAlias "tivi"
                keyPassword propOrDef('TIVI_RELEASE_KEY_PWD', "")
            }
        }
    }

    lint {
        baseline = file("lint-baseline.xml")
        // Disable lintVital. Not needed since lint is run on CI
        checkReleaseBuilds false
        // Ignore any tests
        ignoreTestSources true
        // Make the build fail on any lint errors
        abortOnError true
        // Allow lint to check dependencies
        checkDependencies true
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.composecompiler.get()
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    packagingOptions {
        // Exclude AndroidX version files
        exclude 'META-INF/*.version'
        // Exclude consumer proguard files
        exclude 'META-INF/proguard/*'
        // Exclude the Firebase/Fabric/other random properties files
        exclude '/*.properties'
        exclude 'fabric/*.properties'
        exclude 'META-INF/*.properties'
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            versionNameSuffix "-dev"
            applicationIdSuffix ".debug"
        }

        release {
            if (useReleaseKeystore) {
                signingConfig signingConfigs.release
            } else {
                // Otherwise just use the debug keystore (this is mainly for PR CI builds)
                signingConfig signingConfigs.debug
            }
            shrinkResources true
            minifyEnabled true
            proguardFiles 'proguard-rules.pro'
        }

        benchmark {
            initWith buildTypes.release
            signingConfig signingConfigs.debug
            matchingFallbacks = ['release']
            debuggable false
        }
    }

    flavorDimensions "mode"
    productFlavors {
        qa {
            dimension "mode"
            // This is a build with Chucker enabled
            proguardFiles += 'proguard-rules-chucker.pro'
            versionNameSuffix "-qa"
        }

        standard {
            dimension "mode"
            // Standard build is always ahead of the QA builds as it goes straight to
            // the alpha channel. This is the 'release' flavour
            versionCode android.defaultConfig.versionCode + 1
        }
    }

    variantFilter { variant ->
        // Ignore the standardDebug variant, QA == debug
        def isQa = variant.flavors.any { it.name.contains("qa") }
        if (!isQa && variant.buildType.name == "debug") {
            setIgnore(true)
        } else if (isQa && variant.buildType.name == "benchmark") {
            setIgnore(true)
        }
    }
}

dependencies {
    implementation projects.base
    implementation projects.core.analytics
    implementation projects.core.logging
    implementation projects.common.ui.view
    implementation projects.common.imageloading
    implementation projects.common.ui.compose
    implementation projects.data
    implementation projects.dataAndroid
    implementation projects.api.trakt
    implementation projects.api.traktAuth
    implementation projects.api.tmdb
    implementation projects.domain
    implementation projects.tasks

    implementation projects.ui.account
    implementation projects.ui.discover
    implementation projects.ui.showdetails
    implementation projects.ui.episodedetails
    implementation projects.ui.followed
    implementation projects.ui.watched
    implementation projects.ui.popular
    implementation projects.ui.trending
    implementation projects.ui.recommended
    implementation projects.ui.search
    implementation projects.ui.showseasons
    implementation projects.ui.settings

    implementation libs.androidx.lifecycle.viewmodel.ktx

    implementation libs.androidx.activity.compose

    implementation libs.androidx.navigation.compose

    implementation libs.androidx.emoji

    implementation libs.compose.foundation.foundation
    implementation libs.compose.foundation.layout
    implementation libs.compose.material.material
    implementation libs.compose.material.iconsext
    implementation libs.compose.animation.animation
    implementation libs.compose.ui.tooling

    implementation libs.accompanist.navigation.animation
    implementation libs.accompanist.navigation.material

    implementation libs.threeTenAbp

    implementation libs.timber

    implementation libs.kotlin.coroutines.android

    implementation libs.androidx.profileinstaller

    implementation libs.okhttp.loggingInterceptor

    implementation libs.hilt.library
    implementation libs.hilt.compose
    kapt libs.hilt.compiler

    implementation libs.hilt.work
    kapt libs.hilt.compiler

    implementation libs.google.crashlytics
    implementation libs.google.analytics

    qaImplementation libs.chucker.library

    qaImplementation libs.debugdrawer.debugdrawer
    qaImplementation libs.debugdrawer.retrofit
    qaImplementation libs.retrofit.mock
    qaImplementation libs.debugdrawer.timber
    qaImplementation libs.debugdrawer.okhttplogger

    qaImplementation libs.leakCanary

    testImplementation libs.junit
    testImplementation libs.robolectric
    testImplementation libs.androidx.test.core
    testImplementation libs.androidx.test.rules
}

android.applicationVariants.all { variant ->
    task "open${variant.name.capitalize()}" {
        dependsOn "install${variant.name.capitalize()}"

        doLast {
            exec {
                commandLine "adb shell monkey -p ${variant.applicationId} -c android.intent.category.LAUNCHER 1".split(" ")
            }
        }
    }
}

if (file("google-services.json").exists()) {
    apply plugin: libs.plugins.gms.googleServices.get().pluginId
    apply plugin: libs.plugins.firebase.crashlytics.get().pluginId
}
