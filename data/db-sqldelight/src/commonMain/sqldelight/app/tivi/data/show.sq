CREATE TABLE IF NOT EXISTS `shows` (
    `id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    `title` TEXT,
    `original_title` TEXT,
    `trakt_id` INTEGER AS kotlin.Int,
    `tmdb_id` INTEGER AS kotlin.Int,
    `imdb_id` TEXT,
    `overview` TEXT,
    `homepage` TEXT,
    `trakt_rating` REAL AS kotlin.Float,
    `trakt_votes` INTEGER AS kotlin.Int,
    `certification` TEXT,
    `first_aired` TEXT AS kotlinx.datetime.Instant,
    `country` TEXT,
    `network` TEXT,
    `network_logo_path` TEXT,
    `runtime` INTEGER AS kotlin.Int,
    `genres` TEXT,
    `status` TEXT AS app.tivi.data.models.ShowStatus,
    `airs_day` INTEGER AS kotlinx.datetime.DayOfWeek,
    `airs_time` TEXT AS kotlinx.datetime.LocalTime,
    `airs_tz` TEXT AS kotlinx.datetime.TimeZone
);

-- indices

CREATE UNIQUE INDEX IF NOT EXISTS `index_shows_trakt_id` ON `shows` (`trakt_id`);

CREATE INDEX IF NOT EXISTS `index_shows_tmdb_id` ON `shows` (`tmdb_id`);

-- queries

getShowWithId:
SELECT * FROM shows WHERE id = :id;

getShowWithTraktId:
SELECT * FROM shows WHERE trakt_id = :id;

getShowsWithIds:
SELECT * FROM shows WHERE id IN :ids;

getShowWithTmdbId:
SELECT * FROM shows WHERE tmdb_id = :id;

getTraktIdForShowId:
SELECT trakt_id FROM shows WHERE id = :id;

getImdbIdForShowId:
SELECT imdb_id FROM shows WHERE id = :id;

getTmdbIdForShowId:
SELECT tmdb_id FROM shows WHERE id = :id;

getIdForTraktId:
SELECT id FROM shows WHERE trakt_id = :id;

getIdForTmdbId:
SELECT id FROM shows WHERE tmdb_id = :id;

delete:
DELETE FROM shows WHERE id = :id;

deleteAll:
DELETE FROM shows;

update:
UPDATE shows SET
    `title` = :title,
    `original_title` = :original_title,
    `trakt_id` = :trakt_id,
    `tmdb_id` = :tmdb_id,
    `imdb_id` = :imdb_id,
    `overview` = :overview,
    `homepage` = :homepage,
    `trakt_rating` = :trakt_rating,
    `trakt_votes` = :trakt_votes,
    `certification` = :certification,
    `first_aired` = :first_aired,
    `country` = :country,
    `network` = :network,
    `network_logo_path` = :network_logo_path,
    `runtime` = :runtime,
    `genres` = :genres,
    `status` = :status,
    `airs_day` = :airs_day,
    `airs_time` = :airs_time,
    `airs_tz` = :airs_tz
WHERE id = :id;

insert:
INSERT INTO shows (
    `id`,
    `title`,
    `original_title`,
    `trakt_id`,
    `tmdb_id`,
    `imdb_id`,
    `overview`,
    `homepage`,
    `trakt_rating`,
    `trakt_votes`,
    `certification`,
    `first_aired`,
    `country`,
    `network`,
    `network_logo_path`,
    `runtime`,
    `genres`,
    `status`,
    `airs_day`,
    `airs_time`,
    `airs_tz`
) VALUES (
    nullif(:id, 0),
    :title,
    :original_title,
    :trakt_id,
    :tmdb_id,
    :imdb_id,
    :overview,
    :homepage,
    :trakt_rating,
    :trakt_votes,
    :certification,
    :first_aired,
    :country,
    :network,
    :network_logo_path,
    :runtime,
    :genres,
    :status,
    :airs_day,
    :airs_time,
    :airs_tz
);

lastInsertRowId:
SELECT last_insert_rowid();

search:
SELECT shows.* FROM shows
WHERE shows.title LIKE :query;
