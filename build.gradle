/*
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

import app.tivi.buildsrc.DependencyUpdates
import app.tivi.buildsrc.ReleaseType

buildscript {
    ext.buildConfig = [
            'compileSdk': 31,
            'minSdk'    : 23,
            'targetSdk' : 31,
    ]

    repositories {
        google()
        mavenCentral()

        // Used for Accompanist snapshots
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }

    dependencies {
        classpath libs.android.pluginGradle
        classpath libs.kotlin.pluginGradle

        classpath libs.kotlin.extensions

        classpath libs.google.gmsGoogleServices
        classpath libs.google.crashlyticsGradle

        classpath libs.hilt.pluginGradle
    }
}

plugins {
    alias(libs.plugins.spotless)
    alias(libs.plugins.gradleDependencyUpdate)
}

allprojects {
    repositories {
        google()
        mavenCentral()

        // Jetpack Compose SNAPSHOTs
        def composeSnapshot = libs.versions.composesnapshot.get()
        if (composeSnapshot.length() > 1) {
            maven { url "https://androidx.dev/snapshots/builds/$composeSnapshot/artifacts/repository/" }
        }

        // Used for snapshots
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    }
}

subprojects {
    apply plugin: 'com.diffplug.spotless'
    spotless {
        kotlin {
            target '**/*.kt'
            targetExclude("$buildDir/**/*.kt")
            targetExclude('bin/**/*.kt')

            ktlint(libs.versions.ktlint.get())
            licenseHeaderFile rootProject.file('spotless/copyright.kt')
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            // Treat all Kotlin warnings as errors
            allWarningsAsErrors = true

            // Enable experimental coroutines APIs, including Flow
            freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
            freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.FlowPreview"
            freeCompilerArgs += "-Xopt-in=kotlin.Experimental"

            // Set JVM target to 11
            jvmTarget = JavaVersion.VERSION_11
        }
    }
}

/**
 * Update dependencyUpdates task to reject versions which are more 'unstable' than our
 * current version.
 */
tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        def current = DependencyUpdates.versionToRelease(it.currentVersion)
        // If we're using a SNAPSHOT, ignore since we must be doing so for a reason.
        if (current == ReleaseType.SNAPSHOT) return true

        // Otherwise we reject if the candidate is more 'unstable' than our version
        def candidate = DependencyUpdates.versionToRelease(it.candidate.version)
        return candidate.isLessStableThan(current)
    }
}

Object propOrDef(String propertyName, Object defaultValue) {
    def propertyValue = project.properties[propertyName]
    return propertyValue != null ? propertyValue : defaultValue
}
