version: 2.0

workspace: &workspace
  ~/tivi

config_android: &config_android
  docker:
    - image: circleci/android:api-29
  working_directory: *workspace
  environment:
    JAVA_TOOL_OPTIONS: "-Xmx2048m"
    GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dkotlin.incremental=false -Dkotlin.compiler.execution.strategy=in-process"
    TERM: dumb

update_sdk: &update_sdk
  run:
    name: Update SDK
    command: |
      yes | sdkmanager --licenses || true
      sdkmanager "platform-tools" "platforms;android-29"

gen_cache_key: &gen_cache_key
  run:
    name: Generate cache key
    command: ./checksum.sh /tmp/checksum.txt

restore_cache: &restore_cache
  restore_cache:
    keys:
      - gradle-{{ .Branch }}-{{ checksum "/tmp/checksum.txt" }}
      - gradle-{{ .Branch }}-
      - gradle-

save_cache: &save_cache
  save_cache:
    paths:
      - ~/.gradle/caches
      - ~/.gradle/wrapper
    key: gradle-{{ .Branch }}-{{ checksum "/tmp/checksum.txt" }}

attach_workspace: &attach_workspace
  attach_workspace:
    at: *workspace

persist_workspace: &persist_workspace
  persist_to_workspace:
    root: *workspace
    paths:
      - ./*/build

decrypt_secrets: &decrypt_secrets
  run:
    name: Decrypt secrets
    command: release/signing-setup.sh $ENCRYPT_KEY

clean_secrets: &clean_secrets
  run:
    name: Cleanup secrets
    command: release/signing-cleanup.sh

jobs:
  build_debug:
    <<: *config_android
    steps:
      - <<: *update_sdk
      - checkout
      - <<: *gen_cache_key
      - <<: *restore_cache
      - <<: *decrypt_secrets
      - run:
          name: Download Dependencies
          command: ./gradlew dependencies
      - run:
          name: Assemble and Test APKs
          command: ./gradlew bundleDebug assembleDebug -Ptivi.versioncode=$CIRCLE_BUILD_NUM --scan
      - <<: *clean_secrets
      - <<: *save_cache
      - store_artifacts:
          path: app/build/outputs
          destination: outputs
      - <<: *persist_workspace

  check:
    <<: *config_android
    steps:
      - <<: *update_sdk
      - checkout
      - <<: *attach_workspace
      - <<: *gen_cache_key
      - <<: *restore_cache
      - run:
          name: Check code style
          command: ./gradlew spotlessCheck --scan
      - run:
          name: Run tests
          command: ./gradlew testDebug --scan
      - run:
          name: Run lint
          command: ./gradlew app:lintDebug dependencyUpdates --scan
      - store_artifacts:
          path: app/build/reports
          destination: reports
      - store_artifacts:
          path: build/dependencyUpdates
          destination: dependencyUpdates
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit      

  build_release:
    <<: *config_android
    steps:
      - <<: *update_sdk
      - checkout
      - <<: *attach_workspace
      - <<: *gen_cache_key
      - <<: *restore_cache
      - <<: *decrypt_secrets
      - run:
          name: Check and assemble APKs
          command: ./gradlew bundleRelease assembleRelease -Ptivi.versioncode=$CIRCLE_BUILD_NUM --scan
      - <<: *clean_secrets
      - store_artifacts:
          path: app/build/outputs
          destination: outputs
      - store_artifacts:
          path: app/build/reports
          destination: reports
      - <<: *persist_workspace

  deploy_to_play:
    <<: *config_android
    steps:
      - <<: *update_sdk
      - checkout
      - <<: *gen_cache_key
      - <<: *restore_cache
      - <<: *attach_workspace
      - <<: *decrypt_secrets
      - run:
          name: Deploy to Alpha channel
          command: ./gradlew publishRelease -Ptivi.versioncode=$CIRCLE_BUILD_NUM --scan
      - <<: *clean_secrets

  deploy_to_github_release:
    docker:
      - image: circleci/golang:1.12
    working_directory: *workspace
    steps:
      - checkout
      - <<: *attach_workspace
      - run:
          name: "Install ghr"
          command: go get github.com/tcnksm/ghr
      - run:
          name: "Publish Release on GitHub"
          command: release/tag-github-release.sh

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build_debug:
          filters:
            tags:
              only: /.*/
      - build_release:
          requires:
            - build_debug
          filters:
            tags:
              only: /.*/
      - check:
          requires:
            - build_debug
          filters:
            tags:
              only: /.*/
      - deploy_to_play:
          requires:
            - check
            - build_release
          filters:
            branches:
              only: master
            tags:
              only: /^v.*/
      - deploy_to_github_release:
          requires:
            - check
            - build_release
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
